name: Build and Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: registry.digitalocean.com/dev-cr
  IMAGE_NAME: digitaloceanaiautomation
  DROPLET_NAME: ubuntu-s-1vcpu-1gb-nyc1-01

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Log in to DigitalOcean Container Registry
      run: doctl registry login --expiry-seconds 1200
    
    - name: Clean up existing repository before build
      run: |
        echo "Checking repository status..."
        
        # List all repositories first
        echo "Current repositories in dev-cr registry:"
        doctl registry repository list-v2 dev-cr || echo "No repositories found"
        
        # One-time cleanup: Delete old fastapi-docker repository if it exists
        if doctl registry repository list-v2 dev-cr --format Name --no-header 2>/dev/null | grep -q "^fastapi-docker$"; then
          echo "Found old fastapi-docker repository, deleting (one-time cleanup)..."
          echo "y" | doctl registry repository delete dev-cr fastapi-docker 2>/dev/null || echo "Failed to delete fastapi-docker"
        fi
        
        # For digitaloceanaiautomation repository, only clean up old tags, keep the repository
        if doctl registry repository list-v2 dev-cr --format Name --no-header 2>/dev/null | grep -q "^digitaloceanaiautomation$"; then
          echo "Repository 'digitaloceanaiautomation' exists, cleaning up old tags only..."
          
          # Delete only old tags (keep latest and current SHA if they exist)
          EXISTING_TAGS=$(doctl registry repository list-tags dev-cr digitaloceanaiautomation --format Tag --no-header 2>/dev/null || echo "")
          if [ ! -z "$EXISTING_TAGS" ]; then
            echo "Found existing tags: $EXISTING_TAGS"
            echo "$EXISTING_TAGS" | while read -r tag; do
              if [ ! -z "$tag" ] && [ "$tag" != "latest" ] && [ "$tag" != "$GITHUB_SHA" ]; then
                echo "Deleting old tag: $tag"
                doctl registry repository delete-tag dev-cr digitaloceanaiautomation "$tag" --force 2>/dev/null || echo "Failed to delete tag $tag"
              else
                echo "Keeping tag: $tag (latest or current build)"
              fi
            done
          fi
        else
          echo "Repository 'digitaloceanaiautomation' doesn't exist yet, will be created on first push"
        fi
        
        # Clean up any other unknown repositories (safety check)
        OTHER_REPOS=$(doctl registry repository list-v2 dev-cr --format Name --no-header 2>/dev/null | grep -v "^digitaloceanaiautomation$" | grep -v "^fastapi-docker$" || echo "")
        if [ ! -z "$OTHER_REPOS" ]; then
          echo "Found unexpected repositories, removing: $OTHER_REPOS"
          echo "$OTHER_REPOS" | while read -r repo; do
            if [ ! -z "$repo" ]; then
              echo "Deleting unexpected repository: $repo"
              echo "y" | doctl registry repository delete dev-cr "$repo" 2>/dev/null || echo "Failed to delete $repo"
            fi
          done
        fi
        
        echo "Cleanup completed. Ready for build..."
    
    - name: Build Docker image
      run: |
        docker build -t $REGISTRY/$IMAGE_NAME:$GITHUB_SHA .
        docker build -t $REGISTRY/$IMAGE_NAME:latest .
    
    - name: Push image to DigitalOcean Container Registry
      run: |
        # Normal push (should work most of the time now)
        echo "Pushing images to registry..."
        docker push $REGISTRY/$IMAGE_NAME:$GITHUB_SHA
        docker push $REGISTRY/$IMAGE_NAME:latest
        echo "Push completed successfully!"
    
    - name: Deploy to DigitalOcean Droplet
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USERNAME }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        script: |
          # Configure doctl and login to registry (doctl and docker should already be installed)
          doctl auth init --access-token ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          doctl registry login --expiry-seconds 1200
          
          # Stop and remove existing container
          docker stop digitaloceanaiautomation || true
          docker rm digitaloceanaiautomation || true
          
          # Pull and run new image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker run -d --name digitaloceanaiautomation -p 80:8000 --restart unless-stopped ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Clean up old images
          docker image prune -f