name: Build and Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: registry.digitalocean.com/dev-cr
  IMAGE_NAME: digitaloceanaiautomation
  DROPLET_NAME: ubuntu-s-1vcpu-1gb-nyc1-01

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Log in to DigitalOcean Container Registry
      run: doctl registry login --expiry-seconds 1200
    
    - name: Clean up existing repository before build
      run: |
        echo "Cleaning up old repositories and preparing for new build..."
        
        # Delete the old fastapi-docker repository if it exists
        echo "Checking for and removing old fastapi-docker repository..."
        doctl registry repository delete dev-cr fastapi-docker --force 2>/dev/null || echo "fastapi-docker repository not found or already deleted"
        
        # Clean up digitaloceanaiautomation repository
        echo "Cleaning up digitaloceanaiautomation repository..."
        
        # Try to delete common tag names that might exist
        doctl registry repository delete-tag dev-cr digitaloceanaiautomation latest --force 2>/dev/null || echo "latest tag not found"
        doctl registry repository delete-tag dev-cr digitaloceanaiautomation $GITHUB_SHA --force 2>/dev/null || echo "$GITHUB_SHA tag not found"
        
        # Get all existing tags and delete them
        EXISTING_TAGS=$(doctl registry repository list-tags dev-cr digitaloceanaiautomation --format Tag --no-header 2>/dev/null || echo "")
        if [ ! -z "$EXISTING_TAGS" ]; then
          echo "Found existing tags, deleting: $EXISTING_TAGS"
          echo "$EXISTING_TAGS" | while read -r tag; do
            if [ ! -z "$tag" ]; then
              echo "Deleting tag: $tag"
              doctl registry repository delete-tag dev-cr digitaloceanaiautomation "$tag" --force || echo "Failed to delete $tag"
            fi
          done
        fi
        
        # Force garbage collection
        echo "Starting garbage collection..."
        doctl registry garbage-collection start dev-cr --include-untagged-manifests || echo "GC start failed"
        
        # Wait for cleanup to complete
        sleep 15
        
        echo "Cleanup completed. Current repositories:"
        doctl registry repository list-v2 dev-cr || echo "No repositories found"
    
    - name: Build Docker image
      run: |
        docker build -t $REGISTRY/$IMAGE_NAME:$GITHUB_SHA .
        docker build -t $REGISTRY/$IMAGE_NAME:latest .
    
    - name: Push image to DigitalOcean Container Registry (with retry)
      run: |
        # First attempt to push
        if ! docker push $REGISTRY/$IMAGE_NAME:$GITHUB_SHA; then
          echo "First push failed, attempting aggressive cleanup..."
          
          # Emergency cleanup - delete the entire repository and recreate
          echo "Deleting entire repository to clear space..."
          doctl registry repository delete dev-cr digitaloceanaiautomation --force || echo "Repository delete failed"
          
          # Wait for deletion to complete
          sleep 20
          
          # Force garbage collection
          doctl registry garbage-collection start dev-cr --include-untagged-manifests || echo "GC failed"
          sleep 30
          
          # Retry push - this will create the repository fresh
          echo "Retrying push after cleanup..."
          docker push $REGISTRY/$IMAGE_NAME:$GITHUB_SHA
        fi
        
        # Push latest tag
        docker push $REGISTRY/$IMAGE_NAME:latest
    
    - name: Deploy to DigitalOcean Droplet
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USERNAME }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        script: |
          # Configure doctl and login to registry (doctl and docker should already be installed)
          doctl auth init --access-token ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          doctl registry login --expiry-seconds 1200
          
          # Stop and remove existing container
          docker stop digitaloceanaiautomation || true
          docker rm digitaloceanaiautomation || true
          
          # Pull and run new image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker run -d --name digitaloceanaiautomation -p 80:8000 --restart unless-stopped ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Clean up old images
          docker image prune -f