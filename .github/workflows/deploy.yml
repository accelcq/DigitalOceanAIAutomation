name: Build and Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: registry.digitalocean.com/dev-cr
  IMAGE_NAME: digitaloceanaiautomation
  DROPLET_NAME: ubuntu-s-1vcpu-1gb-nyc1-01

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Log in to DigitalOcean Container Registry
      run: doctl registry login --expiry-seconds 1200
    
    - name: Clean up existing repository before build
      run: |
        echo "Checking repository status..."
        
        # List all repositories first
        echo "Current repositories in dev-cr registry:"
        doctl registry repository list-v2 dev-cr || echo "No repositories found"
        
        # Get all existing repositories
        ALL_REPOS=$(doctl registry repository list-v2 dev-cr --format Name --no-header 2>/dev/null || echo "")
        
        if [ ! -z "$ALL_REPOS" ]; then
          echo "Found existing repositories: $ALL_REPOS"
          
          # Delete ALL repositories except digitaloceanaiautomation if it exists
          echo "$ALL_REPOS" | while read -r repo; do
            if [ ! -z "$repo" ]; then
              if [ "$repo" = "digitaloceanaiautomation" ]; then
                echo "Found target repository 'digitaloceanaiautomation', cleaning up old tags only..."
                # Delete only old tags for our target repository
                EXISTING_TAGS=$(doctl registry repository list-tags dev-cr digitaloceanaiautomation --format Tag --no-header 2>/dev/null || echo "")
                if [ ! -z "$EXISTING_TAGS" ]; then
                  echo "Found existing tags: $EXISTING_TAGS"
                  echo "$EXISTING_TAGS" | while read -r tag; do
                    if [ ! -z "$tag" ] && [ "$tag" != "latest" ] && [ "$tag" != "$GITHUB_SHA" ]; then
                      echo "Deleting old tag: $tag"
                      doctl registry repository delete-tag dev-cr digitaloceanaiautomation "$tag" --force 2>/dev/null || echo "Failed to delete tag $tag"
                    else
                      echo "Keeping tag: $tag (latest or current build)"
                    fi
                  done
                fi
              else
                echo "Deleting repository: $repo (cleanup for repository limit)"
                # Use the correct doctl command syntax to delete repository
                doctl registry repository delete dev-cr "$repo" --force || echo "Failed to delete $repo - trying alternative method"
                
                # Alternative: Delete all tags first, then repository will be auto-removed
                echo "Alternative cleanup: Deleting all tags from $repo..."
                REPO_TAGS=$(doctl registry repository list-tags dev-cr "$repo" --format Tag --no-header 2>/dev/null || echo "")
                if [ ! -z "$REPO_TAGS" ]; then
                  echo "Deleting tags from $repo: $REPO_TAGS"
                  echo "$REPO_TAGS" | while read -r tag; do
                    if [ ! -z "$tag" ]; then
                      echo "Deleting tag $tag from $repo"
                      doctl registry repository delete-tag dev-cr "$repo" "$tag" --force 2>/dev/null || echo "Failed to delete tag $tag"
                    fi
                  done
                fi
              fi
            fi
          done
        else
          echo "No existing repositories found"
        fi
        
        # Force garbage collection to ensure cleanup
        echo "Starting garbage collection to free up space..."
        doctl registry garbage-collection start dev-cr --include-untagged-manifests 2>/dev/null || echo "GC start failed - continuing anyway"
        
        # Wait for garbage collection to complete
        echo "Waiting for cleanup to complete..."
        sleep 30
        
        echo "Final cleanup state:"
        doctl registry repository list-v2 dev-cr || echo "No repositories found"
        
        # If repository still exists, try one more aggressive deletion
        REMAINING_REPOS=$(doctl registry repository list-v2 dev-cr --format Name --no-header 2>/dev/null | grep -v "^digitaloceanaiautomation$" || echo "")
        if [ ! -z "$REMAINING_REPOS" ]; then
          echo "Still found repositories after cleanup: $REMAINING_REPOS"
          echo "Attempting final cleanup..."
          echo "$REMAINING_REPOS" | while read -r repo; do
            if [ ! -z "$repo" ]; then
              echo "Final attempt to delete: $repo"
              doctl registry repository delete dev-cr "$repo" --force || echo "Final deletion failed for $repo"
            fi
          done
          
          # Wait a bit more and check again
          sleep 15
        fi
        
        # Final validation - ensure cleanup was successful
        echo "Validating cleanup success..."
        FINAL_CHECK=$(doctl registry repository list-v2 dev-cr --format Name --no-header 2>/dev/null | grep -v "^digitaloceanaiautomation$" || echo "")
        if [ ! -z "$FINAL_CHECK" ]; then
          echo "❌ ERROR: Repository cleanup FAILED!"
          echo "Still found repositories: $FINAL_CHECK"
          echo "Cannot proceed with deployment due to repository limit"
          echo ""
          echo "Manual cleanup required:"
          echo "1. Go to DigitalOcean Control Panel → Container Registry"
          echo "2. Delete repositories manually: $FINAL_CHECK"
          echo "3. Or run: doctl registry repository delete dev-cr REPOSITORY_NAME --force"
          echo ""
          exit 1
        else
          echo "✅ Repository cleanup successful! Ready to proceed with build."
          REMAINING_COUNT=$(doctl registry repository list-v2 dev-cr --format Name --no-header 2>/dev/null | wc -l)
          echo "Current repository count: $REMAINING_COUNT (limit: 1)"
        fi
    
    - name: Pre-build validation
      run: |
        echo "Pre-build validation: Checking repository limits..."
        
        # Count current repositories
        REPO_COUNT=$(doctl registry repository list-v2 dev-cr --format Name --no-header 2>/dev/null | wc -l)
        echo "Current repository count: $REPO_COUNT"
        
        # Check if we're at or under the limit
        if [ "$REPO_COUNT" -gt 1 ]; then
          echo "❌ ERROR: Too many repositories ($REPO_COUNT) - exceeds free tier limit of 1"
          echo "Cleanup failed. Current repositories:"
          doctl registry repository list-v2 dev-cr
          echo ""
          echo "Please manually delete unwanted repositories before proceeding:"
          doctl registry repository list-v2 dev-cr --format Name --no-header | grep -v "^digitaloceanaiautomation$"
          exit 1
        elif [ "$REPO_COUNT" -eq 1 ]; then
          # Check if the one repository is our target repository
          EXISTING_REPO=$(doctl registry repository list-v2 dev-cr --format Name --no-header 2>/dev/null)
          if [ "$EXISTING_REPO" != "digitaloceanaiautomation" ]; then
            echo "❌ ERROR: Wrong repository exists: $EXISTING_REPO"
            echo "Expected 'digitaloceanaiautomation' or no repositories"
            exit 1
          else
            echo "✅ Target repository 'digitaloceanaiautomation' exists - proceeding with tag update"
          fi
        else
          echo "✅ No repositories found - will create 'digitaloceanaiautomation' on first push"
        fi
        
        echo "Pre-build validation passed!"
    
    - name: Build Docker image
      run: |
        docker build -t $REGISTRY/$IMAGE_NAME:$GITHUB_SHA .
        docker build -t $REGISTRY/$IMAGE_NAME:latest .
    
    - name: Push image to DigitalOcean Container Registry
      run: |
        # Validate credentials and authentication before pushing
        echo "Validating DigitalOcean authentication..."
        
        # Check if we're logged into the registry
        if ! docker info | grep -q "registry.digitalocean.com"; then
          echo "Warning: Not logged into DigitalOcean registry, attempting re-login..."
          doctl registry login --expiry-seconds 1200
        fi
        
        # Verify doctl authentication
        echo "Checking doctl authentication..."
        if ! doctl auth list | grep -q "default"; then
          echo "Error: doctl authentication failed"
          exit 1
        fi
        
        # Test registry access by listing repositories
        echo "Testing registry access..."
        if ! doctl registry repository list-v2 dev-cr >/dev/null 2>&1; then
          echo "Error: Cannot access DigitalOcean Container Registry"
          echo "Please check DIGITALOCEAN_ACCESS_TOKEN secret"
          exit 1
        fi
        
        # Verify we have the built images locally
        echo "Checking local images..."
        if ! docker images | grep -q "$REGISTRY/$IMAGE_NAME"; then
          echo "Error: Built images not found locally"
          exit 1
        fi
        
        # Now attempt the push with better error handling
        echo "Authentication validated. Pushing images to registry..."
        
        echo "Pushing SHA-tagged image..."
        if ! docker push $REGISTRY/$IMAGE_NAME:$GITHUB_SHA; then
          echo "Failed to push SHA-tagged image"
          echo "Registry status:"
          doctl registry repository list-v2 dev-cr
          exit 1
        fi
        
        echo "Pushing latest image..."
        if ! docker push $REGISTRY/$IMAGE_NAME:latest; then
          echo "Failed to push latest image"
          echo "Registry status:"
          doctl registry repository list-v2 dev-cr
          exit 1
        fi
        
        echo "Push completed successfully!"
        echo "Final registry status:"
        doctl registry repository list-v2 dev-cr
    
    - name: Validate SSH Key before deployment
      run: |
        echo "Validating SSH key configuration..."
        
        # Check if SSH key secret is set and not empty
        if [ -z "${{ secrets.DROPLET_SSH_KEY }}" ]; then
          echo "Error: DROPLET_SSH_KEY secret is empty or not set"
          echo "Please check GitHub repository secrets"
          exit 1
        fi
        
        # Check if SSH key starts with proper format
        SSH_KEY_START=$(echo "${{ secrets.DROPLET_SSH_KEY }}" | head -1)
        if [[ ! "$SSH_KEY_START" =~ ^-----BEGIN.*(PRIVATE KEY|RSA PRIVATE KEY|OPENSSH PRIVATE KEY)-----$ ]]; then
          echo "Error: SSH key does not appear to be in correct format"
          echo "Expected format: -----BEGIN [TYPE] PRIVATE KEY-----"
          echo "Found: $SSH_KEY_START"
          exit 1
        fi
        
        # Check if DROPLET_HOST is set
        if [ -z "${{ secrets.DROPLET_HOST }}" ]; then
          echo "Error: DROPLET_HOST secret is empty or not set"
          exit 1
        fi
        
        # Check if DROPLET_USERNAME is set
        if [ -z "${{ secrets.DROPLET_USERNAME }}" ]; then
          echo "Error: DROPLET_USERNAME secret is empty or not set"
          exit 1
        fi
        
        echo "SSH key validation passed!"
        echo "Host: ${{ secrets.DROPLET_HOST }}"
        echo "Username: ${{ secrets.DROPLET_USERNAME }}"
        echo "SSH Key format: Valid"
    
    - name: Deploy to DigitalOcean Droplet
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USERNAME }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        script: |
          # Configure doctl and login to registry (doctl and docker should already be installed)
          doctl auth init --access-token ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          doctl registry login --expiry-seconds 1200
          
          # Check current running containers before cleanup
          echo "Current running containers before cleanup:"
          docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}" || echo "No containers running"
          
          # Stop and remove existing containers (both old and new names)
          echo "Cleaning up existing containers..."
          docker stop digitaloceanaiautomation || true
          docker rm digitaloceanaiautomation || true
          docker stop fastapi-app || true
          docker rm fastapi-app || true
          docker stop fastapi-docker || true
          docker rm fastapi-docker || true
          
          # Check containers after cleanup
          echo "Containers after cleanup:"
          docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}" || echo "No containers running"
          
          # Pull and run new image
          echo "Pulling latest image..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          echo "Starting new container..."
          docker run -d --name digitaloceanaiautomation -p 80:8000 --restart unless-stopped ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Verify container is running and show detailed status
          echo "Final container status:"
          docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
          
          # Show specific container details if running
          if docker ps | grep -q digitaloceanaiautomation; then
            echo "✓ digitaloceanaiautomation container is running successfully"
            echo "Container details:"
            docker inspect digitaloceanaiautomation --format "{{.State.Status}} - {{.NetworkSettings.Ports}}"
          else
            echo "✗ digitaloceanaiautomation container is NOT running"
            echo "Container logs:"
            docker logs digitaloceanaiautomation || echo "No logs available"
            exit 1
          fi
          
          # Clean up old images
          echo "Cleaning up old images..."
          docker image prune -f