name: Build and Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: registry.digitalocean.com/dev-cr
  IMAGE_NAME: digitaloceanaiautomation
  DROPLET_NAME: ubuntu-s-1vcpu-1gb-nyc1-01

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Log in to DigitalOcean Container Registry
      run: doctl registry login --expiry-seconds 1200
    
    - name: Clean up existing repository before build
      run: |
        echo "Cleaning up existing repositories to avoid limit issues..."
        
        # List all repositories in the registry
        EXISTING_REPOS=$(doctl registry repository list-v2 dev-cr --format Name --no-header 2>/dev/null || echo "")
        
        if [ ! -z "$EXISTING_REPOS" ]; then
          echo "Found existing repositories: $EXISTING_REPOS"
          
          # Check if our target repository already exists
          if echo "$EXISTING_REPOS" | grep -q "^digitaloceanaiautomation$"; then
            echo "Target repository 'digitaloceanaiautomation' already exists, cleaning it up..."
            # Delete all tags/manifests in the existing repository
            doctl registry repository delete-manifest dev-cr digitaloceanaiautomation --force || true
            echo "Cleaned up existing digitaloceanaiautomation repository"
          else
            # If other repositories exist and we're at the limit, delete them
            echo "Cleaning up other repositories to make space..."
            for repo in $EXISTING_REPOS; do
              echo "Deleting repository: $repo"
              doctl registry repository delete dev-cr $repo --force || true
            done
          fi
        else
          echo "No existing repositories found, proceeding with build..."
        fi
    
    - name: Build Docker image
      run: |
        docker build -t $REGISTRY/$IMAGE_NAME:$GITHUB_SHA .
        docker build -t $REGISTRY/$IMAGE_NAME:latest .
    
    - name: Push image to DigitalOcean Container Registry
      run: |
        docker push $REGISTRY/$IMAGE_NAME:$GITHUB_SHA
        docker push $REGISTRY/$IMAGE_NAME:latest
    
    - name: Deploy to DigitalOcean Droplet
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USERNAME }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        script: |
          # Install Docker if not already installed
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
            newgrp docker
          fi
          
          # Install doctl if not already installed
          if ! command -v doctl &> /dev/null; then
            cd ~
            wget https://github.com/digitalocean/doctl/releases/download/v1.104.0/doctl-1.104.0-linux-amd64.tar.gz
            tar xf doctl-1.104.0-linux-amd64.tar.gz
            sudo mv doctl /usr/local/bin
          fi
          
          # Configure doctl and login to registry
          doctl auth init --access-token ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          doctl registry login --expiry-seconds 1200
          
          # Stop and remove existing container
          docker stop digitaloceanaiautomation || true
          docker rm digitaloceanaiautomation || true
          
          # Pull and run new image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker run -d --name digitaloceanaiautomation -p 80:8000 --restart unless-stopped ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Clean up old images
          docker image prune -f